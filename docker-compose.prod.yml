services:
  postgres:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-Campaign}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-insecure561!$}"
      POSTGRES_DB: "${POSTGRES_DB:-CampaignTracker}"
    networks:
      - backend
    restart: always
    env_file:
      - path: .env
        required: false
  
  django:
    build: ./Campaign-Django
    command: gunicorn Campaign-Django.wsgi:application --bind 0.0.0.0:8000 --workers 3
    volumes:
      - ./Campaign-Django:/usr/src/app
    depends_on:
      postgres:
        condition: service_started
    environment:
      - DEBUG=False
    networks:
      - backend
    env_file:
      - path: .env
    expose:
      - 8000

  react:
    build: ./campaign-react
    command: npm run build && npm run start
    volumes:
      -./campaign-react:/user/src/app
    environment:
      - NODE_ENV=production
    networks:
      - frontend
    expose:
      - 3000
  
  nginx:
    build: ./nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      django:
        condition: service_started
      react:
        condition: service_started
    networks:
      - frontend
      - backend
    restart: always

volumes:
  postgres_data: {}

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge